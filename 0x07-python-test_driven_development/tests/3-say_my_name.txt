=============================
Doctest for 3-say_my_name.py
=============================

This doctest contain one function, which is called
``say_my_name()``.

Strings
=======

The ``say_my_name`` function prints My name is <first name> <last name>.

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("John", "Smith")
    My name is John Smith

It also works with only first_name as argument.

::

    >>> say_my_name("Bob") # doctest: +NORMALIZE_WHITESPACE
    My name is Bob

It also works with one argument as last_name.

::

    >>> say_my_name("", "Bob")
    My name is Bob
    
It doen't work when no arguments passed.

::

    >>> say_my_name()
    Traceback (most recent call last):
	...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

It doesn't work with more than two arguments.

::

    >>> say_my_name("Bob", "Smith", "John")
    Traceback (most recent call last):
	...
    TypeError: say_my_name() takes from 1 to 2 positional arguments but 3 were given

Non-Strings
===========

The ``say_my_name()`` does not work with non strings

::

    >>> say_my_name('Ineza', 3)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    >>> say_my_name(2, 'c')
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    >>> say_my_name({'a': 10}, "Blandine")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string
