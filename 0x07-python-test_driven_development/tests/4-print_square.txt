==============================
Doctest for 4-print_square.py
==============================

This doctest contain one function, which is called
``print_square()``.

Numbers
=======

The ``print_square`` function that prints a square with the character #.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(4)
    ####
    ####
    ####
    ####

It also works with 0 as argument.

::

    >>> print_square(0) #doctest: +NORMALIZE_WHITESPACE
     

It doen't work when no arguments passed.

::

    >>> print_square()
    Traceback (most recent call last):
	...
    TypeError: print_square() missing 1 required positional argument: 'size'

It doesn't work with more than one arguments.

::

    >>> print_square(10, 5)
    Traceback (most recent call last):
	...
    TypeError: print_square() takes 1 positional argument but 2 were given

It doesn't work with negative value

::

    >>> print_square(-1)
    Traceback (most recent call last):
	...
    ValueError: size must be >= 0

It doesn't work with too large value

::

    >>> print_square(101)
    Traceback (most recent call last):
	...
    OverflowError: too large value for a size of a square

Non-Integer
===========

The ``print_square()`` does not work with non integers

::

    >>> print_square('Ineza')
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(2.0)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square({'a': 10})
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer
